server {
    listen 80{{ if bool (env.Getenv "SHELLHUB_PROXY") }} proxy_protocol{{ end }};
    {{ if bool (env.Getenv "SHELLHUB_PROXY") }}
    set_real_ip_from ::/0;
    real_ip_header proxy_protocol;
    {{ end }}
    server_name _;
    resolver 127.0.0.11 ipv6=off;

    location / {
        set $upstream ui:8080;

        add_header Cache-Control "no-cache, no-store";
        add_header Pragma "no-cache";

        proxy_pass http://$upstream;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_http_version 1.1;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
    }

    location /api {
        set $upstream api:8080;

        auth_request /auth;
        auth_request_set $tenant_id $upstream_http_x_tenant_id;
        auth_request_set $username $upstream_http_x_username;
	auth_request_set $id $upstream_http_x_id;
        error_page 500 =401 /auth;
        rewrite ^/api/(.*)$ /api/$1 break;
        proxy_set_header X-Tenant-ID $tenant_id;
        proxy_set_header X-Username $username;
	proxy_set_header X-ID $id;
        proxy_pass http://$upstream;
    }

    {{ if bool (env.Getenv "SHELLHUB_ENTERPRISE") -}}
    location /admin/dashboard {
        set $upstream dashboard:8080;
        add_header Cache-Control "no-cache, no-store";
        add_header Pragma "no-cache";

	{{ if ne (env.Getenv "SHELLHUB_ENV") "development" -}}
        rewrite ^/admin/dashboard/(.*)$ /$1 break;
	{{- end }}

        proxy_pass http://$upstream;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_http_version 1.1;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
    }

    location ~ ^/admin/?$ {
        rewrite ^/admin/?$ /admin/dashboard permanent;
    }

    location /admin {
        set $upstream admin-api:8080;
        error_page 500 =401;
        rewrite ^/admin/(.*)$ /$1 break;
        proxy_pass http://$upstream;
    }
    {{ end -}}

    location /ssh/connection {
        set $upstream ssh:8080;

        auth_request /auth;
        auth_request_set $device_uid $upstream_http_x_device_uid;
        proxy_pass http://$upstream;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        {{ if bool (env.Getenv "SHELLHUB_PROXY") -}}
        proxy_set_header X-Real-IP $proxy_protocol_addr;
        {{ else -}}
        proxy_set_header X-Real-IP $x_real_ip;
        {{ end -}}
        proxy_set_header X-Device-UID $device_uid;
        proxy_http_version 1.1;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
    }

    location /ssh/revdial {
        set $upstream ssh:8080;

        proxy_pass http://$upstream;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        {{ if bool (env.Getenv "SHELLHUB_PROXY") -}}
        proxy_set_header X-Real-IP $proxy_protocol_addr;
        {{ else -}}
        proxy_set_header X-Real-IP $x_real_ip;
        {{ end -}}
        proxy_http_version 1.1;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
    }

    location /ssh/auth {
    	set $upstream api:8080;

        auth_request /auth;
        auth_request_set $device_uid $upstream_http_x_device_uid;
        error_page 500 =401 /auth;
        proxy_pass http://$upstream;
        proxy_set_header X-Device-UID $device_uid;
    }

    {{ if bool (env.Getenv "SHELLHUB_ENTERPRISE") -}}
    location /api/firewall {
        set $upstream cloud-api:8080;
        auth_request /auth;
        auth_request_set $tenant_id $upstream_http_x_tenant_id;
        auth_request_set $username $upstream_http_x_username;
        auth_request_set $id $upstream_http_x_id;
        error_page 500 =401 /auth;
        rewrite ^/api/(.*)$ /api/$1 break;
        proxy_set_header X-Tenant-ID $tenant_id;
        proxy_set_header X-Username $username;
        proxy_set_header X-ID $id;
        proxy_pass http://$upstream;
    }
    {{ end -}}
    
    {{ if bool (env.Getenv "SHELLHUB_ENTERPRISE") -}}
    location /api/register {
        set $upstream cloud-api:8080;
        proxy_pass http://$upstream;
    }
    {{ end -}}

    {{ if bool (env.Getenv "SHELLHUB_CLOUD") -}}
    location /api/user/recover_password {
        set $upstream cloud-api:8080;
        proxy_pass http://$upstream;
    }
    {{ end -}}

    {{ if bool (env.Getenv "SHELLHUB_CLOUD") -}}
    location ~* /api/user/(.*)/update_password {
        set $upstream cloud-api:8080;
        proxy_pass http://$upstream;
    }
    {{ end -}}

    {{ if bool (env.Getenv "SHELLHUB_CLOUD") -}}
    location /api/user/resend_email {
        set $upstream cloud-api:8080;
        proxy_pass http://$upstream;
    }
    {{ end -}}

    {{ if bool (env.Getenv "SHELLHUB_CLOUD") -}}
    location /api/user/validation_account {
        set $upstream cloud-api:8080;
        proxy_pass http://$upstream;
    }
    {{ end -}}
    
    {{ if bool (env.Getenv "SHELLHUB_ENTERPRISE") -}}
    location ~* /api/sessions/(.*)/record {
        set $upstream cloud-api:8080;
        auth_request /auth;
        auth_request_set $tenant_id $upstream_http_x_tenant_id;
        auth_request_set $username $upstream_http_x_username;
        error_page 500 =401 /auth;
        rewrite ^/api/(.*)$ /api/$1 break;
        proxy_set_header X-Tenant-ID $tenant_id;
        proxy_set_header X-Username $username;
        proxy_pass http://$upstream;
    }
    {{ end -}}

    {{ if bool (env.Getenv "SHELLHUB_ENTERPRISE") -}}
    location ~* /api/sessions/(.*)/play {
        set $upstream cloud-api:8080;
        auth_request /auth;
        auth_request_set $tenant_id $upstream_http_x_tenant_id;
        auth_request_set $username $upstream_http_x_username;
        error_page 500 =401 /auth;
        rewrite ^/api/(.*)$ /api/$1 break;
        proxy_set_header X-Tenant-ID $tenant_id;
        proxy_set_header X-Username $username;
        proxy_pass http://$upstream;
    }
    {{ end -}}

    location ~* /api/sessions/(.*)/close {
	set $upstream ssh:8080;

        auth_request /auth;
        auth_request_set $tenant_id $upstream_http_x_tenant_id;
        error_page 500 =401 /auth;
        rewrite ^/api/(.*)$ /$1 break;
        proxy_set_header X-Tenant-ID $tenant_id;
        proxy_pass http://$upstream;
    }

    location /api/devices/auth {
    	set $upstream api:8080;

        auth_request off;
        rewrite ^/api/(.*)$ /api/$1 break;
        proxy_pass http://$upstream;
    }

    location /api/login {
        set $upstream api:8080;

        auth_request off;
        rewrite ^/api/(.*)$ /api/$1 break;
        proxy_pass http://$upstream;
    }

    location /auth {
        set $upstream api:8080;

        internal;
        rewrite ^/(.*)$ /internal/$1 break;
        proxy_pass http://$upstream;
    }

    location /ws {
        set $upstream ssh:8080;

        proxy_pass http://$upstream;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';

        {{ if bool (env.Getenv "SHELLHUB_PROXY") -}}
        proxy_set_header X-Real-IP $proxy_protocol_addr;
        {{ else -}}
        proxy_set_header X-Real-IP $x_real_ip;
        {{ end -}}
        proxy_http_version 1.1;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
    }

    location /info {
        default_type application/json;

        content_by_lua_block {
            local host_with_port=ngx.var.http_x_forwarded_host ~= '' and ngx.var.http_x_forwarded_host or ngx.var.http_host
            local host_no_port=ngx.var.http_x_forwarded_host ~= '' and ngx.var.http_x_forwarded_host or ngx.var.host
            local ssh_port=os.getenv("SHELLHUB_SSH_PORT")
            local version=os.getenv("SHELLHUB_VERSION")
            local json = require('cjson')

            if ngx.var.http_x_forwarded_port ~= nil and ngx.var.http_x_forwarded_port ~= '' then
                host_with_port = host_no_port .. ":" .. ngx.var.http_x_forwarded_port
            end

            {{ if bool (env.Getenv "SHELLHUB_CLOUD") -}}
            local data = {version=version, endpoints={api=host_no_port, ssh=host_no_port .. ":" .. ssh_port}}
            {{ else -}}
            local data = {version=version, endpoints={api=host_with_port, ssh=host_no_port .. ":" .. ssh_port}}
            {{ end -}}
            ngx.say(json.encode(data))
        }
    }

    location ~ ^/(install.sh|kickstart.sh)$ {
        default_type "text/x-shellscript";

        content_by_lua_block {
            local host=ngx.var.http_x_forwarded_host ~= '' and ngx.var.http_x_forwarded_host or ngx.var.http_host
            local scheme = ngx.var.http_x_forwarded_proto ~= '' and ngx.var.http_x_forwarded_proto or ngx.var.scheme
            local tenant_id=ngx.var.arg_tenant_id
            local keepalive_interval=ngx.var.arg_keepalive_interval
            local preferred_hostname=ngx.var.arg_preferred_hostname
            local version=os.getenv("SHELLHUB_VERSION")

            if ngx.var.http_x_forwarded_port ~= nil and ngx.var.http_x_forwarded_port ~= '' then
                host = host .. ":" .. ngx.var.http_x_forwarded_port
            end

            local template = require "resty.template"
            template.render("kickstart.sh", {
	        scheme = scheme,
		host = host,
		tenant_id = tenant_id,
		keepalive_interval = keepalive_interval,
		preferred_hostname = preferred_hostname,
		version = version
	    })
        }
    }
}
